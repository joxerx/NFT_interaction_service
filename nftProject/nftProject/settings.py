"""
Django settings for nftProject project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from dataclasses import dataclass
from pathlib import Path
from typing import List
import dotenv
import yaml
from marshmallow_dataclass import class_schema

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

dotenv.load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'nftInteractionApp.apps.NftinteractionappConfig',
    'rest_framework',
    'drf_yasg',
    'scanner.apps.ScannerConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'nftProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'nftProject.wsgi.application'


# Database
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB", "nft_service"),
        "USER": os.getenv("POSTGRES_USER", "nft_service"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", "nft_service"),
        "HOST": os.getenv("POSTGRES_HOST", "postgres"),
        "PORT": os.getenv("POSTGRES_PORT", 5432),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 500,
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "console": {
            "format": "%(asctime)s[%(levelname)s][%(name)s] File '%(pathname)s', line %(lineno)d, in %(funcName)s(): %(message)s",
            "datefmt": "[%d/%b/%Y %H:%M:%S]",
        },
    },
    "handlers": {
        "file": {
            "class": "logging.FileHandler",
            "filename": "info.log"
        },
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "console"
        },
    },
    "loggers": {
        "": {
            "level": "INFO",
            "handlers": [
                "console", "file"
            ],
            "propagate": False,
        },
        "nftProject.scanner.start_scanner": {
            "level": "INFO",
            "handlers": [
                "console",
            ],
            "propagate": False,
        },
    },
}

SHELL_PLUS = "ptpython"


with open(os.path.dirname(__file__) + "/../../config.yml") as f:
    config_data = yaml.safe_load(f)


@dataclass
class Config:
    ALLOWED_HOSTS: List[str]
    DJANGO_SECRET_KEY: str
    DEBUG: bool

    networks: List[str]
    sender_address: str
    sender_private_key: str
    contract_address: str
    abi: str
    event_name: str


config: Config = class_schema(Config)().load(config_data)


ALLOWED_HOSTS = config.ALLOWED_HOSTS
SECRET_KEY = config.DJANGO_SECRET_KEY
DEBUG = config.DEBUG
